"Plugins
call plug#begin('~/.vim/plugged')
Plug 'flazz/vim-colorschemes'
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mileszs/ack.vim'
Plug 'justinmk/vim-sneak'
call plug#end()

"VIM colorscheme
colorscheme molokai

syntax on
set hlsearch
set number
set ruler
set backspace=2

set expandtab
set smarttab
set shiftround
set shiftwidth=4

:command! W w
:command! Q q
:command! Wq wq
:command! WQ wq

"Set leader to comma
let mapleader = ","
inoremap '' <ESC>
nnoremap <CR> o<ESC>
nnoremap <C-S> :update<CR>
inoremap <C-S> <ESC>:update<CR>gi
map <leader>n :NERDTreeToggle<CR>
map <leader>a :Ack 
nnoremap <leader>re :edit $MYVIMRC<CR>
nnoremap <leader>rs :source $MYVIMRC<CR>
nmap <leader>c "+

:set number relativenumber
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
:augroup END

"YCM setting
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_confirm_extra_conf = 0

"NERDTree setting
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

"Ctrlp setting
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = 'build'

"Use system clipboard for * register
set clipboard+=unnamedplus

" tags
set tags=./.tags;,.tags
" Markers for project directories for gutentags
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" Name of tag file
let g:gutentags_ctags_tagfile = '.tags'
" Create ~/.cache/tags if not exist
let s:vim_tags = expand('~/.cache/tags')
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif
" Put tag file in ~/.cache/tags rather than project directory
let g:gutentags_cache_dir = s:vim_tags
" Use  ctags and gtags
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" universal ctags
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
